#!/usr/bin/env python
# encoding: utf-8
# -*- coding: utf-8 -*-
# ---------------------------------------------------------#
#               VTG.SH SOFTWARE GROUP                     #
# ---------------------------------------------------------#
# @Author       :    唐成
# @Mail         :
# @Date         :    2021/04/15
# @Revision     :    1.0
# @File         :
# @Software     :    PyCharm
# @Usefor       :    
# @Revision     :    1.0
# @Modify V1.1 2022.09.05 Song 部分重构，增加了直接退出，skip_current_command 不需要文件中转
# ---------------------------------------------------------#


import sys, platform, os, re, shutil, random
import time
import socket
from PyQt4 import QtCore, QtGui

if (platform.system() == "Windows"):
    sys.path.append(r"Z:/incam/genesis/sys/scripts/Package")
elif (platform.system() == 'Linux'):
    sys.path.append(r"/incam/server/site_data/scripts/Package")
else:
    print("不是在 linux 系统或windows系统下运行脚本，脚本无法运行")
    sys.exit()
    
import MySQL_DB
import genCOM_26 as genCOM
from messageBox import msgBox

# from mwClass_V2 import AboutDialog

import GetData
import json

import MySQL_DB
conn = MySQL_DB.MySQL()
dbc_m = conn.MYSQL_CONNECT(hostName='192.168.2.19', database='hdi_engineering', prod=3306,
                           username='root', passwd='k06931!')
dbc_p = conn.MYSQL_CONNECT(hostName='192.168.2.19', database='project_status', prod=3306,
                           username='root', passwd='k06931!')

from mwClass_V4 import AboutDialog
import random
def send_message_to_director(message_result, job_name, label_result, password_approve=False):
    """发送审批结果界面 20221122 by lyh"""    
    passwd = str(random.random() *10000)[:4]
    while "." in passwd:
        passwd = str(random.random() *10000)[:4]
        time.sleep(0.0001)
        
    # 验证码接收机器人url
    url = "https://oapi.dingtalk.com/robot/send?access_token=412a2d8e3d567c1be81fcd0912e3b27cfa46a10150863734ae7eefb304a3a4cb"
    if u"重要项目" in message_result:
        url = "https://oapi.dingtalk.com/robot/send?access_token=2049ceb982d2a0abd97528190190a1c171193455965e5f961f837ad6db398571"
    
    submitData = {
        'site': u'HDI板事业部',
        'job_name': job_name,
        'pass_tpye': 'CAM',
        'pass_level': 8,""
        'assign_approve': '83288|51059|84310',
        'pass_title': message_result,
        'oa_approval_result': {"passwd": passwd,"machine_url": url,},
    }
    
    if password_approve:
        # 验证码主管审批
        Dialog = AboutDialog(label_result, cancel=False, passwdCheck=True, passwd=passwd, appData=submitData, style=None)
    else:
        Dialog = AboutDialog(label_result, cancel=True, appCheck=True, appData=submitData, style=None)
    Dialog.exec_()

    # --根据审批的结果返回值
    if Dialog.selBut in ['x', 'cancel']:
        return False
    if Dialog.selBut == 'ok':
        return True
    
    return False


app = QtGui.QApplication(sys.argv)

class rename_entity(object):
    def __init__(self, perent=None):        

        self.job_name = os.environ.get("JOB")
        self.step_name = os.environ.get("STEP")
        self.GEN = genCOM.GEN_COM()
        self.getDATA = GetData.Data()
        
        my_file = sys.argv[1]
        hook_tmp_file = my_file
        self.hook_dict = self.get_parm_dict(hook_tmp_file)
        # {'new_name': 'edit', 'name': 'edit++', 'is_fw': 'no', 'fw_type': 'form', 'job': 'hd5606gi013a1-lyh', 'type': 'step'}
        
        # {'new_name': 'hd5606gi013a1-lyh1', 'name': 'hd5606gi013a1-lyh', 'is_fw': 'no', 'fw_type': 'form', 'job': 'hd5606gi013a1-lyh', 'type': 'job'}
        
        print self.hook_dict
        
    def get_user_authority(self, user, authority_name):
        sql = "select * from hdi_engineering.incam_user_authority "
        self.check_data_info = conn.SELECT_DIC(dbc_m, sql)
        for dic_info in self.check_data_info:
            if str(dic_info["user_id"]) == user:
                if dic_info["Authority_Name"] == authority_name and \
                   dic_info["Authority_Status"] ==u"是":
                    return True
                
        return False
    
    def getJOB_LockInfo(self, dataType='locked_info'):
        """
        从数据库中获取料号的锁记录
        :param dataType: 获取的数据类型（status:locked_info log:locked_log）
        :return:dict
        """
        #GEN.COM('get_user_name')
        #IncamUser = GEN.COMANS
        # 测试阶段
        #if IncamUser not in ["83288"]:
            #return {}
        
        lockData = self.getDATA.getLock_Info(self.job_name.split("-")[0])

        try:
            return json.loads(lockData[dataType], encoding='utf8')
        except:
            # print u'传入的数据参数异常'
            return {}    
        
    def main(self):
        
        if self.hook_dict["type"] == "step":
            self.pre_lock = self.getJOB_LockInfo(dataType='locked_info')
            for lock_step in self.pre_lock:
                if lock_step == self.hook_dict["name"]:
                    if self.pre_lock[lock_step]:
                        self.GEN.COM('skip_current_command')
                        msg_box = msgBox()
                        msg_box.critical(self, '警告', "检测到{0}中有层别被锁定，无法删除step名字，请反馈主管处理！".format(lock_step), QtGui.QMessageBox.Ok)
                        exit(0)
                    
        if self.hook_dict["type"] == "job":
            self.GEN.COM('get_user_name')
            IncamUser = self.GEN.COMANS
            
            authority_name = u"管理用户权限"
            previs = self.get_user_authority(IncamUser, authority_name)
            
            res = self.get_authorization(self.hook_dict['job'])
            
            if res:
                message_result = u"重要项目:正式型号不允许删除，请联系主管验证码放行确认！！"
                result = send_message_to_director(message_result, self.hook_dict['job'], message_result, password_approve=True)
                if not result:                    
                    self.GEN.COM('skip_current_command')
                    #msg_box = msgBox()
                    #msg_box.critical(self, '警告', "正式型号不允许删除，请反馈主管处理！", QtGui.QMessageBox.Ok)
                    exit(0)
                
            if self.hook_dict['job'] == "output-laser-lot":                
                self.GEN.COM('skip_current_command')
                msg_box = msgBox()
                msg_box.critical(self, '警告', "output-laser-lot不允许删除，请反馈主管处理！", QtGui.QMessageBox.Ok)
                exit(0)
            
            #增加自动修复joblist 18.4.8 by Neo   # pre 检查 目录
            SourceJob = self.hook_dict["name"]
            DbutilPath = "{0}/bin/dbutil".format(os.environ["INCAM_PRODUCT"])
            # res = subprocess.Popen("{0} path jobs {1}".format(DbutilPath, SourceJob), shell=True)
            fd = os.popen("{0} path jobs {1}".format(DbutilPath, SourceJob))
            try:                
                JobPath = string.strip(fd.readlines()[0])
            except:
                JobPath = ""
            FileExistStat = 'yes'
            if JobPath == "":
                FileExistStat = 'no'
            else:
                if not os.path.exists(JobPath):
                    FileExistStat = 'no'
            
            # print "---------->", [JobPath], FileExistStat
            if FileExistStat == "no":
                DateTime = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(time.time()))
                HostName = socket.gethostname()
                FixLogsPath = "{0}/scripts/Logs/Fix".format(os.environ["INCAM_SITE_DATA_DIR"])
                FixLogsFile = "{0}/rename_entity.log".format(FixLogsPath)
                
                with open(FixLogsFile, "a") as f:
                    f.write("pre	{0}	{1}	{2}	{3}\n".format(SourceJob, DateTime, IncamUser, HostName))

                tFile = "/tmp/tFile{0}.log".format(os.getpid())
                os.system("{0} check y >& {1}".format(DbutilPath, tFile))
                os.system("cat {0} | grep -v 'Checking' | grep -v 'lock' | grep -v 'Lock' >> {1}".format(tFile, FixLogsFile))
                os.system("rm -rf {0}".format(tFile))
                
                with open(FixLogsFile, "a") as f:
                    f.write("\n")
                    
    def get_authorization(self, job_str):
        """
        在MySQL数据库中获取授权用户
        :return:
        """
        # job_str = self.job_name
        DB_M = MySQL_DB.MySQL()
        dbc_m = DB_M.MYSQL_CONNECT(hostName='192.168.2.19', database='project_status', prod=3306, username='root',
                                   passwd='k06931!', )
        query_sql = u"""
        select   cam_d_checker	CAM外层复审人,
            cam_d_innerChecker	CAM内层复审人,
            panel_maker	拼版人,
            inner_maker	内层制作人,
            outer_maker	外层制作人,
            icheck_maker	内层审核人,
            ocheck_maker	外层审核人,
            input_maker	Input人,
            input_checker	input审核人,
            rout_maker	锣带制作人,
            rout_checker	锣带检查人,
            sub_maker	次外层制作人,
            sub_check_maker	次外层审核人
            from project_status_jobmanage psj
            --  and project_status_jobmanage.COLUMNS cname
        WHERE job = '%s'
        and org_code = 'HDI事业部'
        order by id desc """ % job_str.upper()
        query_result = DB_M.SELECT_DIC(dbc_m, query_sql)
        
        dbc_m.close()
        if len(query_result) == 0:
            return False
        
        return True
        
    def get_parm_dict(self, hook_tmp_file):
        """
        解析hooks临时文件，生成dict
        :param hook_tmp_file:
        :return:
        """
        lineList = open(hook_tmp_file, 'r').readlines()
        # os.unlink (self.tmpfile)
        infoDict = self.GEN.parseInfo(lineList)
        # print infoDict
        hook_dict = {}
        if len(infoDict['lnPARAM']) > 0 and len(infoDict['lnVAL']) > 0:
            for i, inparm in enumerate(infoDict['lnPARAM']):
                hook_dict[inparm] = infoDict['lnVAL'][i]
        return hook_dict

if __name__ == "__main__":
    BDL = rename_entity()
    BDL.main()
