#!/usr/bin/env python26
# -*- coding: utf-8 -*-
# --------------------------------------------------------- #
#                VTG.SH SOFTWARE GROUP                      #
# --------------------------------------------------------- #
# @Author       :    Chao.Song
# @Mail         :
# @Date         :    2022.04.30
# @Revision     :    1.0.0
# @File         :    sel_delete.pre
# @Software     :    PyCharm
# @Usefor       :   删除的hooks
# --------------------------------------------------------- #

_header = {
'description': '''
-> 本程序主要服务于胜宏科技（惠州），任何其他团体或个人如需使用，必须经胜宏科技（惠州）相关负责
   人及作者的批准，并遵守以下约定；
1> 本着尊重创作者的劳动成果，任何团体或个人在使用此程序的时候，均需要知会此程序的原始创作者；
2> 在任何场合宣导、宣传，在任何文件、报告、邮件中提及本程序的全部或部分功能，均需要声明此程序的
   原始创作者；
3> 在任何时候对本程序做部分修改或者是升级时，必须要保留文件的原始信息，包括原始文件名、创作者及
   联系方式、创作日期等信息，且不得删除程序中的源代码，只能进行注释处理；
'''
}
'''
               _ooOoo_
              o8888888o
              88" . "88
              (| -_- |)
              O\  =  /O
           ____/`---'\____
         .'  \\|     |//  `.
        /  \\|||  :  |||//  \
       /  _||||| -:- |||||-  \
       |   | \\\  -  /// |   |
       | \_|  ''\---/''  |   |
       \  .-\__  `-`  ___/-. /
     ___`. .'  /--.--\  `. . __
  ."" '<  `.___\_<|>_/___.'  >'"".
 | | :  `- \`.;`\ _ /`;.`/ - ` : | |
 \  \ `-.   \_ __\ /__ _/   .-` /  /
======`-.____`-.___\_____/___.-`____.-'======
               `=---='
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       佛祖保佑       永无BUG
'''






import os
import platform
import sys
import json
from PyQt4 import QtCore, QtGui

# --导入Package
# --加载相对位置，以实现InCAM与Genesis共用
if platform.system() == "Windows":
    sys.path.append(r"Z:/incam/genesis/sys/scripts/Package")
else:
    sys.path.append(r"/incam/server/site_data/scripts/Package")
from messageBox import msgBox
import genCOM_26 as genCOM
import MySQL_DB
import Oracle_DB
import time

GEN = genCOM.GEN_COM()


def unicode_convert(input):
    """
    用于解决json.load json中带u开头的问题
    :param input:
    :return:
    """
    if isinstance(input, dict):
        new_dict = {}
        for key, value in input.iteritems():
            new_dict[unicode_convert(key)] = unicode_convert(value)
        return new_dict
        # return {unicode_convert (key): unicode_convert (value) for key, value in input.iteritems ()}
    elif isinstance(input, list):
        return [unicode_convert(element) for element in input]
    elif isinstance(input, unicode):
        return input.encode('utf-8')
    else:
        return input


class DisPlay(object):
    def __init__(self):
        hook_tmp_file = sys.argv[1]
#        self.hook_dict = self.get_parm_dict(hook_tmp_file)
        self.job_name =os.environ.get('JOB',None)
        self.step_name = os.environ.get('STEP',None)
        self.work_layer_list = []

        GEN.COM('get_affect_layer')
        get_result = GEN.COMANS
        affect_layers = get_result.split(' ')
        self.work_layer_list += affect_layers
        GEN.COM('get_work_layer')
        get_result = GEN.COMANS
        work_layers = get_result.split(' ')
        self.work_layer_list += work_layers
        self.work_layer_list = list(set(self.work_layer_list))
        print self.work_layer_list


        # print self.job_name
        self.job_lock = '%s_job_lock.json' % self.job_name

        PRODUCT = os.environ.get('INCAM_PRODUCT', None)
        if platform.system() == "Windows":
            self.userDir = "%s/fw/jobs/%s/user" % (os.environ.get('GENESIS_DIR', 'D:/genesis'), self.job_name)
        else:
            self.userDir = os.environ.get('JOB_USER_DIR', None)
            if not PRODUCT and not self.userDir:
                # --Linux环境下网络版genesis没有定义INCAM_PRODUCT环境变量
                self.userDir = "%s/fw/jobs/%s/user" % (os.environ.get('GENESIS_DIR', '/genesis'), self.job_name)
        self.pre_lock = self.read_file()
        if not self.pre_lock:
            exit(0)
        # print self.pre_lock

    def run(self):
        # self.hook_dict = {'affected': 'yes|no', 'name': 'l1(sigan)', 'mode': 'signal|board|all'}
        warn_mess = []
        layers_name = []
        # TODO 检查affected的层别是否在lock范围内
        if self.step_name in self.pre_lock:
            layers_name = self.work_layer_list
            intersection_layers = [i for i in layers_name if i in self.pre_lock[self.step_name]]
            if len(intersection_layers) > 0:
                warn_mess.append(u'锁定的Step：%s中_锁定的层别：%s,不可编辑' % (self.step_name, intersection_layers))
            else:
                exit(0)
        else:
            exit(0)
        if len(warn_mess) != 0:
            GEN.COM('skip_current_command')
            msg_box = msgBox()
            msg_box.critical(self, '警告', u"%s" % "\n".join(warn_mess), QtGui.QMessageBox.Ok)
            exit(0)

    def get_parm_dict(self, hook_tmp_file):
        """
        解析hooks临时文件，生成dict
        :param hook_tmp_file:
        :return:
        """
        # === 读文件 ===
        lineList = open(hook_tmp_file, 'r').readlines()
        # os.unlink (self.tmpfile)
        infoDict = GEN.parseInfo(lineList)
        print infoDict
        hook_dict = {}
        if len(infoDict['lnPARAM']) > 0 and len(infoDict['lnVAL']) > 0:
            for i, inparm in enumerate(infoDict['lnPARAM']):
                hook_dict[inparm] = infoDict['lnVAL'][i]
        return hook_dict


    def read_file(self):
        """
        用json从user文件夹中的job_lock.json中读取字典
        :return:
        :rtype:
        """
        json_dict = {}
        stat_file = os.path.join(self.userDir, self.job_lock)
        if os.path.exists(stat_file):
            fd = open(stat_file, 'r')
            json_dict = json.load(fd)
            fd.close()
        else:
            return False

        conver_dict = unicode_convert(json_dict)
        return conver_dict


# # # # --程序入口
if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    myapp = DisPlay()
    sys.exit(myapp.run())
