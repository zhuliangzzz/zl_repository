#!/usr/bin/env python
# encoding: utf-8
# -*- coding: utf-8 -*-
# ---------------------------------------------------------#
#               VTG.SH SOFTWARE GROUP                     #
# ---------------------------------------------------------#
# @Author       :    唐成
# @Mail         :
# @Date         :    2021/04/15
# @Revision     :    1.0
# @File         :
# @Software     :    PyCharm
# @Usefor       :    matrix_delete_row 前检查是否允许删除
# @Revision     :    1.0
# @Modify V1.1 2022.09.05 Song 部分重构，增加了直接退出，skip_current_command 不需要文件中转
# ---------------------------------------------------------#


import sys, platform, os, re, shutil, random

if (platform.system() == "Windows"):
    sys.path.append(r"Z:/incam/genesis/sys/scripts/Package")
elif (platform.system() == 'Linux'):
    sys.path.append(r"/incam/server/site_data/scripts/Package")
else:
    print("不是在 linux 系统或windows系统下运行脚本，脚本无法运行")
    sys.exit()

import genCOM_26 as genCOM


class panelization(object):
    def __init__(self, perent=None):        

        self.job_name = os.environ.get("JOB")
        self.step_name = os.environ.get("STEP")
        self.GEN = genCOM.GEN_COM()

        my_file = sys.argv[1]
        hook_tmp_file = my_file
        self.hook_dict = self.get_parm_dict(hook_tmp_file)
        # {'name': 'Panel-Design'}
        # print self.hook_dict
        
    def main(self):
        if self.hook_dict["name"] == "Panel-Design":            
            os.system("python /frontline/incam/server/site_data/scripts/hdi_scr/Tools/job_lock/pre_move_check.py {0} {1}".format("lock_panelization_status", "yes"))

    def get_parm_dict(self, hook_tmp_file):
        """
        解析hooks临时文件，生成dict
        :param hook_tmp_file:
        :return:
        """
        lineList = open(hook_tmp_file, 'r').readlines()
        # os.unlink (self.tmpfile)
        infoDict = self.GEN.parseInfo(lineList)
        # print infoDict
        hook_dict = {}
        if len(infoDict['lnPARAM']) > 0 and len(infoDict['lnVAL']) > 0:
            for i, inparm in enumerate(infoDict['lnPARAM']):
                hook_dict[inparm] = infoDict['lnVAL'][i]
        return hook_dict

if __name__ == "__main__":
    BDL = panelization()
    BDL.main()
